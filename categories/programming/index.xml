<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Losinggeneration&#39;s Coding and Projects</title>
    <link>https://losinggeneration.com/categories/programming/</link>
    <description>Recent content in Programming on Losinggeneration&#39;s Coding and Projects</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â©2009-2020 Harley Laue</copyright>
    <lastBuildDate>Tue, 12 Jan 2016 05:58:49 +0000</lastBuildDate>
    
	<atom:link href="https://losinggeneration.com/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Go GCC vs GC</title>
      <link>https://losinggeneration.com/2016/01/11/go-gcc-vs-gc/</link>
      <pubDate>Tue, 12 Jan 2016 05:58:49 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2016/01/11/go-gcc-vs-gc/</guid>
      <description>For awhile now I&amp;rsquo;ve been playing around with a stack based language written in Go. The specifics of that project aren&amp;rsquo;t too important here, but I did notice something interesting today as I tried GCC for the first time with the project. First I wanted to make sure it worked so I ran go-5 test and happily all tests passed. Next, I thought I&amp;rsquo;d see how the benchmark looked. Here I think I was most surprised.</description>
    </item>
    
    <item>
      <title>Bootstrapping a Forth in 46 lines of Moonscript code</title>
      <link>https://losinggeneration.com/2014/01/11/bootstrapping-a-forth-in-46-lines-of-moonscript-code/</link>
      <pubDate>Sat, 11 Jan 2014 08:35:04 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2014/01/11/bootstrapping-a-forth-in-46-lines-of-moonscript-code/</guid>
      <description>There&amp;rsquo;s an article called Boostrapping a Forth in 40 lines of Lua code[sic]1 that&amp;rsquo;s been around since around 2007. It&amp;rsquo;s a great article and I&amp;rsquo;d highly recommend reading it. However, I only recently found it after some interest in Forth.
This is the Forth outer interpreter in Lua from the above article reformatted a bit:
eval = function (str) return assert(loadstring(str))() end subj = &amp;#34;&amp;#34; pos = 1 parsebypattern = function (pat) local capture, newpos = string.</description>
    </item>
    
    <item>
      <title>Go UTF-16</title>
      <link>https://losinggeneration.com/2013/07/24/go-utf-16/</link>
      <pubDate>Wed, 24 Jul 2013 19:20:04 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2013/07/24/go-utf-16/</guid>
      <description>This is just a small code fragment that prints out the Unicode characters from the Fullwidth Latin Letters (range 0xFF01-0xFFEF). This works on little &amp;amp; big endian machines (tested with qemu-arm &amp;amp; qemu-mips compiled using gccgo 4.7.) I thought it might have issues with the way it decodes the int32 into a byte array and re-encodes it to a uint16 array.
package main import ( &amp;#34;bytes&amp;#34; &amp;#34;encoding/binary&amp;#34; &amp;#34;fmt&amp;#34; &amp;#34;unicode/utf16&amp;#34; ) func main() { for i := int32(0xFF00); i &amp;lt;= 0xFFEF; i++ { c := new(bytes.</description>
    </item>
    
    <item>
      <title>C Bindings for C&#43;&#43;</title>
      <link>https://losinggeneration.com/2012/08/08/c-bindings-for-c/</link>
      <pubDate>Wed, 08 Aug 2012 16:49:44 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2012/08/08/c-bindings-for-c/</guid>
      <description>Lately I&amp;rsquo;ve been playing around with writing C bindings for a C++ library. Your first thought might be, &amp;ldquo;Why would you bind a C++ to C?&amp;rdquo; Those of you who have ever had to do bindings to other languages may already know the answer. In general, it&amp;rsquo;s much easier to bind C to another language than it is to bind C++ directly. Another, albeit less likely, reason might be because a client wants a C interface instead.</description>
    </item>
    
    <item>
      <title>Chipmunk Physics</title>
      <link>https://losinggeneration.com/2011/09/08/chipmunk-physics/</link>
      <pubDate>Thu, 08 Sep 2011 09:42:56 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2011/09/08/chipmunk-physics/</guid>
      <description>I&amp;rsquo;ve been hard at work at my project which I&amp;rsquo;m yet to call by name on here (and will continue to be that way until I have a playable demo.) First, a status update. I&amp;rsquo;ve ditched the idea of doing the entire engine myself and have now migrated to HGE (Haaf&amp;rsquo;s Game Engine) which fairly recently had a port to *nix and OS X by Ryan C. Gordon. I&amp;rsquo;ve worked a bit on the engine itself after the source release and my changes were pulled in upstream (mostly it adding a CMake build system, but I also did some things like get the tutorial/examples working, silenced warnings, etc.</description>
    </item>
    
    <item>
      <title>CrabEmu for the Didj</title>
      <link>https://losinggeneration.com/2011/04/28/crabemu-for-the-didj/</link>
      <pubDate>Thu, 28 Apr 2011 18:33:49 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2011/04/28/crabemu-for-the-didj/</guid>
      <description>Well, I&amp;rsquo;m releasing what I&amp;rsquo;ll call version 0.1.0 of CrabEmu for the Didj. It includes a custom built rootfs with no questionable code from the LF distribution (for instance, their scripts for checking various things like USB connections.) This initial release requires a DJHI or other third party card that is SD capable. The SD must also have two partitions: Fat32 &amp;amp; Ext 3. Because of the later, you&amp;rsquo;ll also need an OS that&amp;rsquo;s able to read/write to Ext 3 file systems.</description>
    </item>
    
    <item>
      <title>Sega Master System Coding</title>
      <link>https://losinggeneration.com/2011/03/04/sega-master-system-coding/</link>
      <pubDate>Sat, 05 Mar 2011 00:00:40 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2011/03/04/sega-master-system-coding/</guid>
      <description>Besides updating my server, I&amp;rsquo;ve been quite busy with some Sega Master System (SMS from here-on-out) coding. I&amp;rsquo;ve decided to switch to SMS for now instead of Game Gear for now. It seems I&amp;rsquo;ve kind of went my own way with this project. From the looks of it, most people either use WLA-DX or, to a much lesser extent, z88dk. I don&amp;rsquo;t see too much about any other assemblers/compilers. Granted, I haven&amp;rsquo;t looked terribly hard for the topics though.</description>
    </item>
    
    <item>
      <title>Adventures in Lua Binding</title>
      <link>https://losinggeneration.com/2010/12/02/adventures-in-lua-binding/</link>
      <pubDate>Thu, 02 Dec 2010 23:00:12 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2010/12/02/adventures-in-lua-binding/</guid>
      <description>I&amp;rsquo;ve mentioned before (actually, probably only in that last post) about a game I&amp;rsquo;ve been working on on and off for the last few years (I think I said three, but it&amp;rsquo;s actually been five, with it being inactive for most of that time.) I had decided long ago that it would probably be scripted with Lua and I&amp;rsquo;m just now finally getting around to experimenting with that. I&amp;rsquo;ve ultimately decided it&amp;rsquo;s going to either be using OOLua or Luabind.</description>
    </item>
    
    <item>
      <title>Adventures in Lua Embedding</title>
      <link>https://losinggeneration.com/2010/11/10/adventures-in-lua-embedding/</link>
      <pubDate>Thu, 11 Nov 2010 04:36:35 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2010/11/10/adventures-in-lua-embedding/</guid>
      <description>In a personal project which I&amp;rsquo;ve been working on and off on for the last three or so years (without really getting much done to be totally honest), I&amp;rsquo;ve decided to use Lua for the configuration file. The project itself is in C++, so this lead me to use the Lua C API to embed it in the project. Prior to deciding on Lua, I was using a manually parsed key/value format.</description>
    </item>
    
    <item>
      <title>MSP430 Launchpad on Linux</title>
      <link>https://losinggeneration.com/2010/07/02/msp430-launchpad-on-linux/</link>
      <pubDate>Fri, 02 Jul 2010 09:33:17 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2010/07/02/msp430-launchpad-on-linux/</guid>
      <description>I got an MSP430 Launchpad in the mail a couple of days ago. So I&amp;rsquo;ve been playing with that the last couple of days. The first day I went through the tools on the wiki and grabbed both IDE&amp;rsquo;s and all the downloadable links I could. This had to be done on Windows since it&amp;rsquo;s the only platform they support. Being a Linux user 99% of the time, I wasn&amp;rsquo;t too pleased with this situation, so I investigated the tools available for Linux, and that&amp;rsquo;s what I did all of yesterday.</description>
    </item>
    
    <item>
      <title>Game Gear Coding</title>
      <link>https://losinggeneration.com/2010/06/10/game-gear-coding/</link>
      <pubDate>Thu, 10 Jun 2010 22:30:50 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2010/06/10/game-gear-coding/</guid>
      <description>About a year or so back I got a book that the public library was giving away after a book sale on Z80 assembly. I read it, but never really did anything with that knowledge. The thought was always in the back of my head to eventually apply that and play around with some SEGA Master System/Game Gear coding. Unfortunately time has a way of getting away from you.
The library had a book sale about a month or so back and they had quite a few books.</description>
    </item>
    
    <item>
      <title>Fuzebox</title>
      <link>https://losinggeneration.com/2010/01/17/fuzebox/</link>
      <pubDate>Sun, 17 Jan 2010 06:01:21 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2010/01/17/fuzebox/</guid>
      <description>Yesterday I went ahead and bought a Fuzebox which is an open source 8-bit console that is compatible with the Uzebox. Sadly, it won&amp;rsquo;t be here till next month (most likely.) It&amp;rsquo;s currently back ordered (which I knew while ordering it) but is expected to be back in stock the 29th. So hopefully early next month it&amp;rsquo;ll be here. Of course, it&amp;rsquo;s probably better that it&amp;rsquo;ll be a couple weeks it gets here.</description>
    </item>
    
    <item>
      <title>Uzebox</title>
      <link>https://losinggeneration.com/2009/12/29/uzebox/</link>
      <pubDate>Tue, 29 Dec 2009 15:37:55 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2009/12/29/uzebox/</guid>
      <description>Iâve been sort of obsessing over Uzebox lately. Even without purchasing the hardware yet, Iâm getting a pretty excited about the possibilities of this small little console. Not just from the programming aspect, but also because Fuzebox looks like a great exercise in assembling/soldering. Iâve also been considering how/where I should cut the case that Fuzebox provides in their âStarter Kit.â For instance, the one of the things I imagine Iâll be using often is the FTDI to upload code to test and play with.</description>
    </item>
    
    <item>
      <title>CrabEmu</title>
      <link>https://losinggeneration.com/2009/11/22/crabemu/</link>
      <pubDate>Sun, 22 Nov 2009 08:43:20 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2009/11/22/crabemu/</guid>
      <description>Because of my renewed interest in Z80 and wanting to better learn assembly programming, I ultimately want to do a bit with Game Gear/SMS coding. For this though, an emulator with at least some basic debugging facilities would be useful. After searching Linux Game Gear emulators, none really had what I was looking for.
On my first attempt, I decided Dega looked interesting, it has source available. The two major turn offs of Dega was the Z80 core which is x86 assembly, which is obviously not portable and it&amp;rsquo;s license which basically says, do what you want to the source, as long as it&amp;rsquo;s not sold.</description>
    </item>
    
  </channel>
</rss>