<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Losinggeneration&#39;s Coding and Projects</title>
    <link>https://losinggeneration.com/categories/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Losinggeneration&#39;s Coding and Projects</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â©2009-2020 Harley Laue</copyright>
    <lastBuildDate>Tue, 27 Nov 2012 07:55:16 +0000</lastBuildDate>
    
	<atom:link href="https://losinggeneration.com/categories/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>HGE Go work</title>
      <link>https://losinggeneration.com/2012/11/27/hge-go-work/</link>
      <pubDate>Tue, 27 Nov 2012 07:55:16 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2012/11/27/hge-go-work/</guid>
      <description>I just realized I never actually posted about why I was doing a C binding of C++. Basically I bound most of Haaf&amp;rsquo;s Game Engine (HGE) from C++ to C. I ended up getting a bit stuck on the GUI elements and getting a nice way to let them do simple inheritance and polymorphism based on the current C++ classes. This actually wasn&amp;rsquo;t a problem for my end-game which was to take that C binding and make a Go version with cgo.</description>
    </item>
    
    <item>
      <title>C Bindings for C&#43;&#43;</title>
      <link>https://losinggeneration.com/2012/08/08/c-bindings-for-c/</link>
      <pubDate>Wed, 08 Aug 2012 16:49:44 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2012/08/08/c-bindings-for-c/</guid>
      <description>Lately I&amp;rsquo;ve been playing around with writing C bindings for a C++ library. Your first thought might be, &amp;ldquo;Why would you bind a C++ to C?&amp;rdquo; Those of you who have ever had to do bindings to other languages may already know the answer. In general, it&amp;rsquo;s much easier to bind C to another language than it is to bind C++ directly. Another, albeit less likely, reason might be because a client wants a C interface instead.</description>
    </item>
    
    <item>
      <title>Chipmunk Physics</title>
      <link>https://losinggeneration.com/2011/09/08/chipmunk-physics/</link>
      <pubDate>Thu, 08 Sep 2011 09:42:56 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2011/09/08/chipmunk-physics/</guid>
      <description>I&amp;rsquo;ve been hard at work at my project which I&amp;rsquo;m yet to call by name on here (and will continue to be that way until I have a playable demo.) First, a status update. I&amp;rsquo;ve ditched the idea of doing the entire engine myself and have now migrated to HGE (Haaf&amp;rsquo;s Game Engine) which fairly recently had a port to *nix and OS X by Ryan C. Gordon. I&amp;rsquo;ve worked a bit on the engine itself after the source release and my changes were pulled in upstream (mostly it adding a CMake build system, but I also did some things like get the tutorial/examples working, silenced warnings, etc.</description>
    </item>
    
    <item>
      <title>Adventures in Lua Binding</title>
      <link>https://losinggeneration.com/2010/12/02/adventures-in-lua-binding/</link>
      <pubDate>Thu, 02 Dec 2010 23:00:12 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2010/12/02/adventures-in-lua-binding/</guid>
      <description>I&amp;rsquo;ve mentioned before (actually, probably only in that last post) about a game I&amp;rsquo;ve been working on on and off for the last few years (I think I said three, but it&amp;rsquo;s actually been five, with it being inactive for most of that time.) I had decided long ago that it would probably be scripted with Lua and I&amp;rsquo;m just now finally getting around to experimenting with that. I&amp;rsquo;ve ultimately decided it&amp;rsquo;s going to either be using OOLua or Luabind.</description>
    </item>
    
    <item>
      <title>Adventures in Lua Embedding</title>
      <link>https://losinggeneration.com/2010/11/10/adventures-in-lua-embedding/</link>
      <pubDate>Thu, 11 Nov 2010 04:36:35 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2010/11/10/adventures-in-lua-embedding/</guid>
      <description>In a personal project which I&amp;rsquo;ve been working on and off on for the last three or so years (without really getting much done to be totally honest), I&amp;rsquo;ve decided to use Lua for the configuration file. The project itself is in C++, so this lead me to use the Lua C API to embed it in the project. Prior to deciding on Lua, I was using a manually parsed key/value format.</description>
    </item>
    
    <item>
      <title>CrabEmu</title>
      <link>https://losinggeneration.com/2009/11/22/crabemu/</link>
      <pubDate>Sun, 22 Nov 2009 08:43:20 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2009/11/22/crabemu/</guid>
      <description>Because of my renewed interest in Z80 and wanting to better learn assembly programming, I ultimately want to do a bit with Game Gear/SMS coding. For this though, an emulator with at least some basic debugging facilities would be useful. After searching Linux Game Gear emulators, none really had what I was looking for.
On my first attempt, I decided Dega looked interesting, it has source available. The two major turn offs of Dega was the Z80 core which is x86 assembly, which is obviously not portable and it&amp;rsquo;s license which basically says, do what you want to the source, as long as it&amp;rsquo;s not sold.</description>
    </item>
    
  </channel>
</rss>