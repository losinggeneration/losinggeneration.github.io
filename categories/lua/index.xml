<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lua on Losinggeneration Coding Blog</title>
    <link>https://losinggeneration.com/categories/lua/</link>
    <description>Recent content in Lua on Losinggeneration Coding Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â©2009-2020 Harley Laue</copyright>
    <lastBuildDate>Sat, 11 Jan 2014 08:35:04 +0000</lastBuildDate>
    
	<atom:link href="https://losinggeneration.com/categories/lua/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Boostrapping a Forth in 46 lines of Moonscript code</title>
      <link>https://losinggeneration.com/2014/01/11/boostrapping-a-forth-in-46-lines-of-moonscript-code/</link>
      <pubDate>Sat, 11 Jan 2014 08:35:04 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2014/01/11/boostrapping-a-forth-in-46-lines-of-moonscript-code/</guid>
      <description>There&amp;rsquo;s an article called Boostrapping a Forth in 40 lines of Lua code that&amp;rsquo;s been around since around 2007. It&amp;rsquo;s a great article and I&amp;rsquo;d highly recommend reading it. However, I only recently found it after some interest in Forth.
This is the Forth outer interpreter in Lua from the above article reformatted a bit:
eval = function (str) return assert(loadstring(str))() end subj = &amp;#34;&amp;#34; pos = 1 parsebypattern = function (pat) local capture, newpos = string.</description>
    </item>
    
    <item>
      <title>C Bindings for C&#43;&#43;</title>
      <link>https://losinggeneration.com/2012/08/08/c-bindings-for-c/</link>
      <pubDate>Wed, 08 Aug 2012 16:49:44 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2012/08/08/c-bindings-for-c/</guid>
      <description>Lately I&amp;rsquo;ve been playing around with writing C bindings for a C++ library. Your first thought might be, &amp;ldquo;Why would you bind a C++ to C?&amp;rdquo; Those of you who have ever had to do bindings to other languages may already know the answer. In general, it&amp;rsquo;s much easier to bind C to another language than it is to bind C++ directly. Another, albeit less likely, reason might be because a client wants a C interface instead.</description>
    </item>
    
    <item>
      <title>Adventures in Lua Binding</title>
      <link>https://losinggeneration.com/2010/12/02/adventures-in-lua-binding/</link>
      <pubDate>Thu, 02 Dec 2010 23:00:12 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2010/12/02/adventures-in-lua-binding/</guid>
      <description>I&amp;rsquo;ve mentioned before (actually, probably only in that last post) about a game I&amp;rsquo;ve been working on on and off for the last few years (I think I said three, but it&amp;rsquo;s actually been five, with it being inactive for most of that time.) I had decided long ago that it would probably be scripted with Lua and I&amp;rsquo;m just now finally getting around to experimenting with that. I&amp;rsquo;ve ultimately decided it&amp;rsquo;s going to either be using OOLua or Luabind.</description>
    </item>
    
    <item>
      <title>Adventures in Lua Embedding</title>
      <link>https://losinggeneration.com/2010/11/10/adventures-in-lua-embedding/</link>
      <pubDate>Thu, 11 Nov 2010 04:36:35 +0000</pubDate>
      
      <guid>https://losinggeneration.com/2010/11/10/adventures-in-lua-embedding/</guid>
      <description>In a personal project which I&amp;rsquo;ve been working on and off on for the last three or so years (without really getting much done to be totally honest), I&amp;rsquo;ve decided to use Lua for the configuration file. The project itself is in C++, so this lead me to use the Lua C API to embed it in the project. Prior to deciding on Lua, I was using a manually parsed key/value format.</description>
    </item>
    
  </channel>
</rss>